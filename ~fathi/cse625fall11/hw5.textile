---
layout: homework-ta
title: CSE 625 (Autumn 2011), Homework 5
---
The below table shows a summary of Homework #5

table(homework-list).
|_. Question #  |_. Points |_. MIN |_. MAX |_. AVERAGE |_. Comments |
|=.  "1":#Q1    |=.   30   |=.  0  |=. 30  |=. 23.00   | Parts (a) to (f) each has 5 points. |
|=.  "2":#Q2    |=.    5   |=.  0  |=.  5  |=.  3.79   |  |
|=.  "3":#Q3    |=.   20   |=.  0  |=. 20  |=. 13.00   | Parts (a) to (d)  each has 5 points. |
|=.  "4":#Q4    |=.   10   |=.  0  |=. 10  |=.  2.42   | |
|=.  "5":#Q5    |=.   10   |=.  0  |=. 10  |=.  5.09   | |
|=.  "6":#Q6    |=.   10   |=.  0  |=. 10  |=.  3.79   | |
|=.  "7":#Q7    |=.   10   |=.  0  |=. 10  |=.  8.77   | |
|=.  "8":#Q8    |=.    5   |=.  0  |=.  5  |=.  3.70   | |

You can find more detailed information and the answers to some of the questions below.

h2(#Q1). Question 1

h3. Common Mistakes

*Part (a)*: The set of all palindromes is NOT the answer. 
*Part (b)*: The set of all palindromes is NOT the answer.
*Part ==(c)==*: The set of all strings starting with __a__ and ending with __b__ is NOT the answer. Also the set of all strings with equal numbers of __a__ 's and __b__ 's is NOT the answer.
*Part (d)*: The set of all non-palindromes is not the answer.
*Part (e)*: The set of all strings is NOT the answer.
ably need to review the Pumping Lemma.

h2(#Q2). Question 2

**Part (g)**
Hint: Try __aabbcc__

h2(#Q3). Question 3

Try special cases such as the empty string, __a__ , __b__ and __c__ .
*Part (d)*: Note that in the string of this language # of __a__ 's could be greater than the number of __b__ 's. Also # of __b__ 's can get be arbitrarily large. 

h2(#Q4). Question 4

This was a vague questions. Note that the question asks you to give a __recursive algorithm__ for finding live variables. It does not ask you to give an algorithm to see if a given string such as __x__ can be generated by the grammar. As an example of a variable that is not live consider this grammar:

S -> SbS | A
A -> aS

As you can see if you start from S, you will never stop. Similarly, A never leads to a string of terminals.


h2(#Q5). Question 5

One nice way to do this is to find __{a[^i^]b[^j^]c[^k^]: i < j+k}__ and __{a[^i^]b[^j^]c[^k^]: i > j+k}__ 

h2(#Q6). Question 6

Note that the proof that a grammar __G__ generates a language __L__ has two parts.
1. You should show that every string that is generated by __G__ is in the L.
2. You also should show that for every string in __L__, there is a way to generate it in __G__.

h2(#Q7). Question 7

This question was straightforward and clear.

h2(#Q8). Question 8

There are a lot of strings in L which are not in the G. Just as an example, try __abbbcc__.

