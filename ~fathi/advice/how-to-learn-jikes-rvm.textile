---
layout: blog
title: How to learn Jikes RVM
---

This page is mostly my personal experience while I was wrestling with Jikes RVM to learn it. Jikes RVM is a used by many researchers as a research tool and success of many gradutes students in their studies depend on how well they know Jikes RVM and how efficient they are in implementing thier ideas in Jikes RVM. Jikes RVM is not the biggest and the most complext open source project out there but it is still big enough and complext enought to make it difficult for anybody to learn its internals. Trying to understand Jikes RVM blindly or with a trail and error approach is very unlikeky to work. I struggled a lot to learn Jikes RVM and I'm still struggling but I doesn't mean that you should step into my footprints. Here are what I strongly recommend you if you are planing to learn Jikes RVM. When I started working on Jikes RVM I didn't know what "metacicular" means!

h3(#textbooks). Read the text book.

There is not text book about Jikes RVM and there is nobody in the world that knows all parts of Jikes RVM (maybe expecpt David Grove). But there are limmited recourses that you can start with. The very first tthing that you need to read is a chapeter in "Beautiful Architecture" about Jikes RVM. This chapter is short description of a Jikes RVM.

If you checkout the Jikes RVM source repository, there is a PDF file in the source repository nammed "userguide". This PDF file is also a good start point.

h3(#community). Jikes RVM community

Jikes RVM has a strong community that are very helpful if you need the help. There are two mailing lists, first one is for Jikes RVM development team, second one is for the broader Jikes RVM community. If you need to learn internals of Jikes RVM joining the core development mailing list and following the threads is a must.

h3(error_massages). Learn common rrror massages

I admit that Jikes RVM is not very debuggable but there are some very common error massages that are very likely to show up in your stack traces every now and then, You should know two things about these stack traces, 1) what can cause them 2) what cannot cause them. Knowing what can cause an error message is essential in a not-vey-debuggable-system such as Jikes RVM but it is not always feasible. In many cases you wont have any clue about the origin of the error message. To add more salt into the You can save enourmous amount of your time if you learn what cannot


